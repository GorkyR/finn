generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Transaction {
    id Int @id @default(autoincrement())

    date  DateTime @default(now())
    year  Int
    month Int

    destination String
    description String?
    amount      Decimal

    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    tags Tag[]

    @@index([user_id])
    @@index([year])
    @@index([month, year])
}

model Tag {
    id   Int    @id @default(autoincrement())
    name String

    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    transactions Transaction[]
    budgets      Budget[]

    @@unique([name, user_id])
    @@index([user_id])
    @@index([name, user_id])
}

model Expense {
    id           Int       @id @default(autoincrement())
    name         String
    description  String?
    lower_amount Decimal
    upper_amount Decimal
    date_start   DateTime  @map("start_time")
    date_end     DateTime? @map("end_time")
    repeats      Int

    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model Income {
    id          Int       @id @default(autoincrement())
    description String
    amount      Decimal
    date_start  DateTime
    date_end    DateTime?
    repeats     Int

    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model Budget {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    amount      Decimal

    user_id String
    user    User   @relation(fields: [user_id], references: [id])

    tags Tag[]

    @@unique([name, user_id])
    @@index([user_id])
    @@index([name, user_id])
}

model UserData {
    user_id String @id
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    hours_per_year Int
    hours_per_day  Int?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    transactions Transaction[]
    tags         Tag[]
    expenses     Expense[]
    income       Income[]
    budgets      Budget[]
    data         UserData[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
